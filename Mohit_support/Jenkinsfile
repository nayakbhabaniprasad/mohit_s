pipeline {
    agent any
    
    environment {
        MAVEN_OPTS = '-Xmx1024m -XX:MaxPermSize=256m'
        JAVA_HOME = '/usr/lib/jvm/java-21-openjdk'
        ARTIFACTORY_URL = 'https://artifactory.mastercard.com'
        SONAR_URL = 'https://sonar.mastercard.com'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build') {
            steps {
                sh 'mvn clean compile'
            }
        }
        
        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    publishTestResults testResultsPattern: 'target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('Package Alert Bridge') {
            steps {
                dir('alert-bridge') {
                    sh 'mvn package -DskipTests'
                }
            }
        }
        
        stage('Package Scanner') {
            steps {
                dir('scanner') {
                    sh 'mvn package -DskipTests'
                }
            }
        }
        
        stage('Package Feeder') {
            steps {
                dir('feeder') {
                    sh 'mvn package -DskipTests'
                }
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh 'mvn sonar:sonar'
                }
            }
        }
        
        stage('Publish to Artifactory') {
            steps {
                script {
                    // Publish Alert Bridge JAR
                    def alertBridgeJar = sh(
                        script: "find alert-bridge/target -name '*.jar' -not -name '*-sources.jar' -not -name '*-javadoc.jar' | head -1",
                        returnStdout: true
                    ).trim()
                    
                    if (alertBridgeJar) {
                        sh """
                            curl -u \${ARTIFACTORY_USER}:\${ARTIFACTORY_PASSWORD} \
                                -X PUT \
                                \${ARTIFACTORY_URL}/artifactory/libs-release-local/com/mastercard/fraud-risk-scanner-alert-bridge/\${BUILD_NUMBER}/fraud-risk-scanner-alert-bridge-\${BUILD_NUMBER}.jar \
                                -T \${alertBridgeJar}
                        """
                    }
                    
                    // Publish Scanner JAR
                    def scannerJar = sh(
                        script: "find scanner/target -name '*.jar' -not -name '*-sources.jar' -not -name '*-javadoc.jar' | head -1",
                        returnStdout: true
                    ).trim()
                    
                    if (scannerJar) {
                        sh """
                            curl -u \${ARTIFACTORY_USER}:\${ARTIFACTORY_PASSWORD} \
                                -X PUT \
                                \${ARTIFACTORY_URL}/artifactory/libs-release-local/com/mastercard/fraud-risk-scanner-scanner/\${BUILD_NUMBER}/fraud-risk-scanner-scanner-\${BUILD_NUMBER}.jar \
                                -T \${scannerJar}
                        """
                    }
                    
                    // Publish Feeder JAR
                    def feederJar = sh(
                        script: "find feeder/target -name '*.jar' -not -name '*-sources.jar' -not -name '*-javadoc.jar' | head -1",
                        returnStdout: true
                    ).trim()
                    
                    if (feederJar) {
                        sh """
                            curl -u \${ARTIFACTORY_USER}:\${ARTIFACTORY_PASSWORD} \
                                -X PUT \
                                \${ARTIFACTORY_URL}/artifactory/libs-release-local/com/mastercard/fraud-risk-scanner-feeder/\${BUILD_NUMBER}/fraud-risk-scanner-feeder-\${BUILD_NUMBER}.jar \
                                -T \${feederJar}
                        """
                    }
                }
            }
        }
        
        stage('Build Habitat Package') {
            steps {
                sh '''
                    hab studio build
                '''
            }
        }
        
        stage('Publish Habitat Package') {
            steps {
                sh '''
                    hab pkg upload results/*.hart
                '''
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Build completed successfully'
        }
        failure {
            echo 'Build failed'
        }
    }
}
